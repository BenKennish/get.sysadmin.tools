---
- hosts: all
  remote_user: root

  vars:
      # you can override these vars from command line like this:
      #
      # ansible-playbook -e 'sudoUser=bill ntpCountry=fr'
      #
    rootEmail: ""  # who receives root's emails
    timezone: "Europe/London"
    ntpCountry: "uk"  # used for NTP config
    sudoUser: ""
    sudoTimeout: 30  # sudo timeout in minutes (set to -1 to disable timeout)
    gitConfigName: ""
    gitConfigEmail: ""
    #
    vimDirs:
        - .vim
        - .vim/backup
        - .vim/swap
    configFiles:
        - .bashrc
        - .vimrc

  tasks:

  - name: check that all required vars have been set
    assert:
      that:
        - "rootEmail != ''"
        - "sudoUser != ''"
        - "gitConfigName != ''"
        - "gitConfigEmail != ''"

  - name: selinux - check if enabled
    command: /usr/sbin/selinuxenabled
    register: seLinuxEnabled
    ignore_errors: yes
    changed_when: False

  - name: yum - install libselinux-python
    yum: name=libselinux-python state=installed
    when: seLinuxEnabled.rc == 0

  - name: yum - update everything
    yum: name=* state=latest

  - name: OpenSSH - disable password auth
    lineinfile:
      dest: /etc/ssh/sshd_config
      backup: yes
      line: "PasswordAuthentication no"
      regexp: "^PasswordAuthentication "
      insertafter: "^#PasswordAuthentication "
    notify: restart sshd

#   **TODO** set root password to a random string and display it to STDOUT?
#            maybe only if a password is not set
#   **TODO** server hardening (see CentOS guide)
#   **TODO**: iptables config

  - name: OpenSSH - disable GSSAPI auth
    lineinfile:
      dest: /etc/ssh/sshd_config
      backup: yes
      line: "GSSAPIAuthentication no"
      regexp: "^GSSAPIAuthentication "
      insertafter: "^#GSSAPIAuthentication "
    notify: restart sshd

  - name: OpenSSH - disable challenge response auth
    lineinfile:
      dest: /etc/ssh/sshd_config
      backup: yes
      line: "ChallengeResponseAuthentication no"
      regexp: "^ChallengeResponseAuthentication "
      insertafter: "^#ChallengeResponseAuthentication "
    notify: restart sshd

  - name: yum - install epel-release RPM package
    yum: pkg=epel-release state=installed

  - name: yum - install useful RPM packages
    yum: pkg="{{ item }}" state=installed
    with_items:
       - bash-completion
       - bind-utils
       - curl
       - dos2unix
       - git
       - iotop
       - jwhois
       - lsof
       - lynx
       - mailx
       - man
       - nmap
       - ntp
       - ntpdate
       - rsync
       - tcpdump
       - telnet
       - traceroute
       - unix2dos
       - unzip
       - vim-enhanced
       - wget
       - yum-cron
       - zip

  - debug: msg="TODO: set CHECK_ONLY=yes and DOWNLOAD_ONLY=yes in /etc/sysconfig/yum-cron "

  - name: /etc/aliases - setup root email alias to {{ rootEmail }}
    lineinfile:
        dest: /etc/aliases
        backup: yes
        line: "root:          {{ rootEmail }}"
        regexp: "^root:"
        insertafter: "^#root:"
    notify: update aliases database

  - name: yum-cron - start and enable
    service: name=yum-cron state=started enabled=yes

# TODO: setup yum-cron to check and download only (no auto-install)

  - name: timezone config - /etc/sysconfig/clock
    lineinfile:
      dest: /etc/sysconfig/clock
      backup: yes
      line: 'ZONE="{{ timezone }}"'

  - name: timezone config - /etc/localtime symlink
    file: src=../usr/share/zoneinfo/{{ timezone }} dest=/etc/localtime state=link force=yes

  - name: ntpd - use servers in {{ ntpCountry }}.pool.ntp.org
    lineinfile:
      dest: /etc/ntp.conf
      backup: yes
      line: "server {{ item }}.{{ ntpCountry }}.pool.ntp.org iburst"
      regexp: "^server {{ item }}.{{ ntpCountry }}.pool.ntp.org "
      insertafter: "^server "
    with_items:
      - "0"
      - "1"
      - "2"
      - "3"

  - name: ntpd - start and enable
    service: name=ntpd state=started enabled=yes


  - name: "copy user config files to /etc/skel/"
    copy: src="files/{{ item }}" dest="/etc/skel/{{ item }}" owner=root group=root
    with_items: configFiles

  - name: create .vim directory in /etc/skel/
    file: path=/etc/skel/{{ item }} state=directory owner=root group=root mode=0700
    with_items: vimDirs


  - name: "copy user config files to /root/"
    copy: src="files/{{ item }}" dest="/root/{{ item }}" backup=yes owner=root group=root
    with_items: configFiles

  - name: create .vim directory in /root/
    file: path=/root/{{ item }} state=directory owner=root group=root mode=0700
    with_items: vimDirs


  - name: user '{{ sudoUser }}' - create and add to 'wheel' group
    user: name={{ sudoUser }} append=yes groups=wheel


  - name: copy user config files to ~{{ sudoUser }}
    copy: src="files/{{ item }}" dest="~{{ sudoUser }}/{{ item }}" owner={{ sudoUser }} group={{ sudoUser }} backup=yes
    with_items: configFiles

  - name: create .vim directory in ~{{ sudoUser }}
    file: path="~{{ sudoUser }}/{{ item }}" state=directory owner={{ sudoUser }} group={{ sudoUser }} mode=0700
    with_items: vimDirs

  - name: sudo - allow wheel group to use sudo
    lineinfile:
        dest: /etc/sudoers
        regexp: "^%wheel"
        line: "%wheel  ALL=(ALL)       ALL"
        validate: 'visudo -cf %s'

  - name: sudo - set timeout to {{ sudoTimeout }} mins
    lineinfile:
        dest: /etc/sudoers
        line: "Defaults    timestamp_timeout={{ sudoTimeout }}"
        regexp: "^Defaults +timestamp_timeout=[0-9]+ *$"
        insertafter: "Defaults +env_reset"
        validate: 'visudo -cf %s'

  - name: .gitconfig - template over for {{ sudoUser }}
    template: src="templates/.gitconfig.j2" dest="~{{ sudoUser }}/.gitconfig" owner="{{ sudoUser }}" group="{{ sudoUser }}" mode=0600

  - name: restrict /root to root user
    file: path=/root state=directory owner=root group=root mode=0700

  - name: use sha512 hash for passwords
    command: authconfig --passalgo=sha512 --update

  - name: sysctl - reject ICMP redirects
    lineinfile:
      dest: /etc/sysctl.conf
      line: "net.ipv4.conf.all.accept_redirects = 0"
      regexp: "^net.ipv4.conf.all.accept_redirects *="

  - name: sysctl - reject 'secure' redirects (from default gateways)
    lineinfile:
      dest: /etc/sysctl.conf
      line: "net.ipv4.conf.all.secure_redirects = 0"
      regexp: "^net.ipv4.conf.all.secure_redirects *="

  - name: sysctl - log martians (packets with impossible addresses)
    lineinfile:
      dest: /etc/sysctl.conf
      line: "net.ipv4.conf.all.log_martians = 1"
      regexp: "^net.ipv4.conf.all.log_martians *="

  handlers:
    - name: update aliases database
      command: newaliases

    - name: restart sshd
      service: name=sshd state=restarted
